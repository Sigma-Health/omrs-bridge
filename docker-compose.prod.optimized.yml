version: '3.8'

services:
  openmrs-bridge-optimized:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    ports:
      - "1221:1221"
    environment:
      # Database configuration
      - DB_HOST=${DB_HOST:-openmrsdb}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME:-openmrs}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-}
      
      # API configuration
      - API_KEYS=${API_KEYS:-}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      
      # Application settings
      - PORT=1221
      - HOST=0.0.0.0
      - DEBUG=false
      - PRODUCTION=true
      
      # Performance settings
      - WORKERS=4
      - MAX_CONNECTIONS=1000
      - CONNECTION_TIMEOUT=30
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    
    # Performance optimizations
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1221/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network configuration
    networks:
      - openmrs-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - openmrs-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - openmrs-bridge-optimized
    restart: unless-stopped
    networks:
      - openmrs-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - openmrs-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - openmrs-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  openmrs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 